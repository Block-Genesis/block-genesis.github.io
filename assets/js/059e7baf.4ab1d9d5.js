"use strict";(self.webpackChunkpendle_documentation=self.webpackChunkpendle_documentation||[]).push([[1221],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),h=r,u=m["".concat(p,".").concat(h)]||m[h]||c[h]||o;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1261:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},p="Introduction",s={unversionedId:"buidl/smart-contracts/introduction",id:"buidl/smart-contracts/introduction",title:"Introduction",description:'n this section, we aim to familiarize you with a powerful and modern development tool hardhat. Since we only need the basics to kick-start our own project, going through the "Getting Started" section of the official documentation is strongly recommended.',source:"@site/docs/buidl/smart-contracts/introduction.md",sourceDirName:"buidl/smart-contracts",slug:"/buidl/smart-contracts/introduction",permalink:"/docs/buidl/smart-contracts/introduction",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebarBuidl",previous:{title:"Overview",permalink:"/docs/buidl/overview"}},d={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Add TypeScript support",id:"add-typescript-support",level:2},{value:"Add <code>OpenZeppelin</code> dependency",id:"add-openzeppelin-dependency",level:2},{value:"Add code formatting and linting",id:"add-code-formatting-and-linting",level:2},{value:"Add test coverage",id:"add-test-coverage",level:2},{value:"Add gas reporter",id:"add-gas-reporter",level:2},{value:"Add contract sizer",id:"add-contract-sizer",level:2},{value:"Add commit lint and git hooks",id:"add-commit-lint-and-git-hooks",level:2},{value:"Contract boilerplate as its separate repo",id:"contract-boilerplate-as-its-separate-repo",level:3},{value:"Contract boilerplate as one of the packages in a monorepo",id:"contract-boilerplate-as-one-of-the-packages-in-a-monorepo",level:3},{value:"Add <code>TypeChain</code> plugin",id:"add-typechain-plugin",level:2},{value:"Add deployment plugins",id:"add-deployment-plugins",level:2},{value:"deploying to localhost and test against deployed contracts",id:"deploying-to-localhost-and-test-against-deployed-contracts",level:3},{value:"deploying to live testnet or mainnet",id:"deploying-to-live-testnet-or-mainnet",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"<code>yarn add</code> failed inside a workspace/package",id:"yarn-add-failed-inside-a-workspacepackage",level:4}],m={toc:c};function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"n this section, we aim to familiarize you with a powerful and modern development tool ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat"),'. Since we only need the basics to kick-start our own project, going through the "',(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/getting-started/"},'Getting Started" section')," of the official documentation is strongly recommended."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Setup the following commandline tools:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},(0,o.kt)("inlineCode",{parentName:"a"},"node.js")," and ",(0,o.kt)("inlineCode",{parentName:"a"},"npm")),": preferably the latest LTS version of ",(0,o.kt)("inlineCode",{parentName:"li"},"node"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://classic.yarnpkg.com/en/docs/install/"},(0,o.kt)("inlineCode",{parentName:"a"},"yarn")))),(0,o.kt)("p",null,"Make a new folder to play with Hardhat basics:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir tutorial && cd tutorial\nnpm init -y\n\n# Then proceed with hardhat installation: https://hardhat.org/getting-started/#installation\n")),(0,o.kt)("p",null,"Learn the following languages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Solidity"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The most recommended tutorial is ",(0,o.kt)("a",{parentName:"li",href:"https://cryptozombies.io/"},"CryptoZombies"),", at least Curriculum 1~4."),(0,o.kt)("li",{parentName:"ul"},"Or read the official ",(0,o.kt)("a",{parentName:"li",href:"https://docs.soliditylang.org/en/latest/index.html"},"Solidity doc")," for more details."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TypeScript"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If you've never wrote any TypeScript before, we strongly recommend ",(0,o.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/intro.html"},'the "TypeScript Handbook"'),"."),(0,o.kt)("li",{parentName:"ul"},"Regardless of whether you come from an OOP language like Java or C#, or a functional language like Haskell or ML, or a hybrid language like Go, Rust or Scala, you should take a look at their ",(0,o.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/intro.html#get-started"},'"Getting started section"'),"."),(0,o.kt)("li",{parentName:"ul"},"Main reasons for our nudging to ",(0,o.kt)("inlineCode",{parentName:"li"},"TypeScript")," over ",(0,o.kt)("inlineCode",{parentName:"li"},"JavaScript")," is its dominant popularity and superior protection against many common JS caveats via its type systems. (see ",(0,o.kt)("a",{parentName:"li",href:"https://insights.stackoverflow.com/survey/2021#technology-most-loved-dreaded-and-wanted"},"StackOverflow's 2021 survey"),", or ",(0,o.kt)("a",{parentName:"li",href:"https://2020.stateofjs.com/en-US/technologies/javascript-flavors/#javascript_flavors_experience_ranking"},"state of JS")," for yourself)")))),(0,o.kt)("h2",{id:"add-typescript-support"},"Add TypeScript support"),(0,o.kt)("p",null,"The following steps are almost verbatim from the ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/guides/typescript.html"},"official doc")," except we use ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn")," as our package manager."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Remove ",(0,o.kt)("inlineCode",{parentName:"p"},"package-lock.json")," and use ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn")," instead. You should be able to see a ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn.lock")," file being generated."),(0,o.kt)("p",{parentName:"li"},"\u26a0 you are only removing ",(0,o.kt)("inlineCode",{parentName:"p"},"package-lock.json"),", NOT ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),". Your ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn")," still replies on ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," to install all dependencies and other tasks."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"rm package-lock.json\nyarn\n\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install the following ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," packages:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev ts-node typescript chai @types/node @types/mocha @types/chai\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Rename ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.js")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"mv hardhat.config.js hardhat.config.ts\n")),(0,o.kt)("p",{parentName:"li"},"and update the file, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/config/#available-config-options"},"doc here"),",\nif you don't understand some of the configurations specified below."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { task, HardhatUserConfig } from "hardhat/config";\nimport "@nomiclabs/hardhat-waffle";\n\ntask("accounts", "Prints the list of accounts", async (taskArgs, hre) => {\n  const accounts = await hre.ethers.getSigners();\n  for (const account of accounts) {\n    console.log(account.address);\n  }\n});\n\nconst config: HardhatUserConfig = {\n  defaultNetwork: "hardhat",\n  paths: {\n    sources: "./contracts",\n    tests: "./test",\n    artifacts: "./build/artifacts",\n    cache: "./build/cache",\n  },\n  solidity: {\n    compilers: [\n      {\n        version: "0.8.0",\n        settings: {\n          optimizer: {\n            enabled: true,\n            runs: 200,\n          },\n        },\n      },\n    ],\n  },\n  mocha: {\n    timeout: 20000,\n  },\n};\n\nexport default config;\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a ",(0,o.kt)("a",{parentName:"p",href:"./packages/smart-contracts-boilerplate-sample/tsconfig.json"},(0,o.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," file, (learn more about what it does ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html"},"here"),")"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "target": "es2019",\n    "module": "commonjs",\n    "strict": true,\n    "esModuleInterop": true,\n    "resolveJsonModule": true,\n    "outDir": "dist",\n    "baseUrl": "."\n  },\n  "include": ["./scripts", "./test"],\n  "files": ["./hardhat.config.ts"]\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For convenience, introduce the following scripts in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "compile": "yarn hardhat compile",\n    "test": "yarn compile && yarn hardhat test"\n  }\n}\n')),(0,o.kt)("p",{parentName:"li"},"Now, run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn compile"),", you should be able to successfully compile your contracts. Woohoo! \ud83c\udf89"),(0,o.kt)("p",{parentName:"li"},"Notice there's ",(0,o.kt)("inlineCode",{parentName:"p"},"artifiacts/")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"cache/")," folders being created, both of which are git ignored, and if you dig into ",(0,o.kt)("inlineCode",{parentName:"p"},"artifiacts/contracts/Greeter.sol/Greeter.json"),", you will see an ABI spec of the compiled contract.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, let's rename our test file:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"mv test/sample-test.js test/greeter.spec.ts\nrm scripts/sample-script.js # we don't use this\n")),(0,o.kt)("p",{parentName:"li"},"Now run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn test"),", you should see your test passing!"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"  Greeter\nDeploying a Greeter with greeting: Hello, world!\nChanging greeting from 'Hello, world!' to 'Hola, mundo!'\n \u2713 Should return the new greeting once it's changed (415ms)\n\n 1 passing (416ms)\n\n \u2728 Done in 1.84s.\n")),(0,o.kt)("p",{parentName:"li"},'Notice "Deploying a Greeter with greeting: Hello, world!" is actually being ',(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," from the contract constructor! This is super nice for debugging purposes, and thanks to ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat/console.sol")," for enabling this feature."))),(0,o.kt)("h2",{id:"add-openzeppelin-dependency"},"Add ",(0,o.kt)("inlineCode",{parentName:"h2"},"OpenZeppelin")," dependency"),(0,o.kt)("p",null,"As demonstrated in CryptoZombies' tutorial or most other Solidity tutorials, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts"},"OpenZeppelin contracts")," are a set of community vetted, widely used library."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install these contracts in your dependencies"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @openzeppelin/contracts\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To verify that we can import the OpenZeppelin library, add the following line to your ",(0,o.kt)("inlineCode",{parentName:"p"},"contract/Greeter.sol")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sol"},'import "@openzeppelin/contracts/utils/math/SafeMath.sol";\n\n')),(0,o.kt)("p",{parentName:"li"},"Then run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn compile"),". If it compiled successfully, as it should, then it means you now have ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenZeppelin")," dependency installed."))),(0,o.kt)("h2",{id:"add-code-formatting-and-linting"},"Add code formatting and linting"),(0,o.kt)("p",null,"We use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/protofire/solhint"},(0,o.kt)("inlineCode",{parentName:"a"},"solhint"))," for linting Solidity contract code, ",(0,o.kt)("a",{parentName:"p",href:"https://prettier.io/docs/en/index.html"},(0,o.kt)("inlineCode",{parentName:"a"},"prettier"))," for formatting TypeScript/Javascript/Solidity code,\nand ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/keithamus/sort-package-json"},(0,o.kt)("inlineCode",{parentName:"a"},"sort-package-json"))," for sorting dependencies declaration in alphabetical order."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},'If you wondering "linter v.s. Formatter", please ',(0,o.kt)("a",{parentName:"p",href:"https://prettier.io/docs/en/comparison.html"},"read here"),".")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add those tools to ",(0,o.kt)("inlineCode",{parentName:"p"},"devDependencies")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev solhint prettier sort-package-json solhint-plugin-prettier prettier-plugin-solidity\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add Solidity linting rules in a new file ",(0,o.kt)("inlineCode",{parentName:"p"},".solhint.json"),", see explanations for these configs and a complete list ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/protofire/solhint#rules"},"here"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "extends": "solhint:recommended",\n  "plugins": ["prettier"],\n  "rules": {\n    "prettier/prettier": "error",\n    "compiler-version": ["off"],\n    "constructor-syntax": "warn",\n    "quotes": ["error", "single"],\n    "func-visibility": ["warn", { "ignoreConstructors": true }],\n    "not-rely-on-time": "off",\n    "private-vars-leading-underscore": ["warn", { "strict": false }]\n  }\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add format rules in a new file ",(0,o.kt)("inlineCode",{parentName:"p"},".prettierrc"),", see explanations for these configs and a complete list ",(0,o.kt)("a",{parentName:"p",href:"https://prettier.io/docs/en/options.html"},"here"),". The ","*",".sol rules adhere to the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/latest/style-guide.html"},"solididty style guide"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "overrides": [\n    {\n      "files": "**.sol",\n      "options": {\n        "printWidth": 99,\n        "tabWidth": 2,\n        "useTabs": false,\n        "singleQuote": true,\n        "bracketSpacing": false\n      }\n    },\n    {\n      "files": ["**.ts", "**.js"],\n      "options": {\n        "printWidth": 145,\n        "tabWidth": 2,\n        "semi": true,\n        "singleQuote": true,\n        "useTabs": false,\n        "endOfLine": "auto"\n      }\n    },\n    {\n      "files": "**.json",\n      "options": {\n        "tabWidth": 2,\n        "printWidth": 200\n      }\n    }\n  ]\n}\n')),(0,o.kt)("p",{parentName:"li"},"We further specify a list of files that we don't want format in a new file ",(0,o.kt)("inlineCode",{parentName:"p"},".prettierignore")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-text"},"# General\n.prettierignore\n.solhintignore\n.husky\n.gitignore\n.gitattributes\n.env.example\n.env\nworkspace.code-workspace\n.DS_STORE\ncodechecks.yml\n\n# Hardhat\ncoverage\ncoverage.json\nbuild\ndeployments\ndist\n\n# JS\nnode_modules\npackage-lock.json\nyarn.lock\n\n# Solidity\ncontracts/mock\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add the following scripts to ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "lint": "yarn solhint \'contracts/**/*.sol\' && yarn prettier --check \'./**\'",\n    "lint:fix": "yarn sort-package-json && yarn prettier --write \'./**\' && yarn solhint --fix \'contracts/**/*.sol\'"\n  }\n}\n')),(0,o.kt)("p",{parentName:"li"},"Now run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn lint"),", you should see a bunch of error reported and justifications or hints to fix them:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"contracts/Greeter.sol\n4:8   error    Replace \"hardhat/console.sol\" with 'hardhat/console.sol'                                                            prettier/prettier\n4:8   error    Use single quotes for string literals                                                                               quotes\n5:8   error    Replace \"@openzeppelin/contracts/utils/math/SafeMath.sol\" with '@openzeppelin/contracts/utils/math/SafeMath.sol'    prettier/prettier\n5:8   error    Use single quotes for string literals                                                                               quotes\n8:1   error    Delete \xb7\xb7                                                                                                           prettier/prettier\n8:5   warning  'greeting' should start with _                                                                                      private-vars-leading-underscore\n10:1   error    Delete \xb7\xb7                                                                                                           prettier/prettier\n11:5   error    Replace \xb7\xb7\xb7\xb7console.log(\"Deploying\xb7a\xb7Greeter\xb7with\xb7greeting:\" with console.log('Deploying\xb7a\xb7Greeter\xb7with\xb7greeting:'  prettier/prettier\n11:21  error    Use single quotes for string literals                                                                               quotes\n12:1   error    Replace \xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7 with \xb7\xb7\xb7\xb7                                                                                          prettier/prettier\n13:3   error    Delete \xb7\xb7                                                                                                           prettier/prettier\n15:1   error    Delete \xb7\xb7                                                                                                           prettier/prettier\n16:5   error    Delete \xb7\xb7\xb7\xb7                                                                                                         prettier/prettier\n17:3   error    Delete \xb7\xb7                                                                                                           prettier/prettier\n19:1   error    Replace \xb7\xb7\xb7\xb7 with \xb7\xb7                                                                                                prettier/prettier\n20:1   error    Delete \xb7\xb7\xb7\xb7                                                                                                         prettier/prettier\n20:21  error    Use single quotes for string literals                                                                               quotes\n21:1   error    Replace \xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7 with \xb7\xb7\xb7\xb7                                                                                          prettier/prettier\n22:1   error    Delete \xb7\xb7                                                                                                           prettier/prettier\n\n \u2716 19 problems (18 errors, 1 warning)\n")),(0,o.kt)("p",{parentName:"li"},"A quick way to fix is running ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn lint:fix"),"."),(0,o.kt)("p",{parentName:"li"},"After which you might still see some warning and errors that our linters can't make decisions on how to fix them.\nGo to ",(0,o.kt)("inlineCode",{parentName:"p"},"contract/Greeter.sol"),", change line 8 to ",(0,o.kt)("inlineCode",{parentName:"p"},"string public greeting;"),", change line 20 to ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log('Changing greeting from', greeting, 'to', _greeting);"),"."),(0,o.kt)("p",{parentName:"li"},"Now run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn lint")," again, there should be no errors left."))),(0,o.kt)("h2",{id:"add-test-coverage"},"Add test coverage"),(0,o.kt)("p",null,"We use ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/plugins/solidity-coverage.html"},(0,o.kt)("inlineCode",{parentName:"a"},"solidity-coverage")," plugin")," for test coverage report."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install dependency"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev solidity-coverage\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Update ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import "solidity-coverage";\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a new script command in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "coverage": "hardhat coverage"\n  }\n}\n')),(0,o.kt)("p",{parentName:"li"},"Then run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn coverage"),", you should get:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"--------------|----------|----------|----------|----------|----------------|\nFile          |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\n--------------|----------|----------|----------|----------|----------------|\ncontracts/    |      100 |      100 |      100 |      100 |                |\nGreeter.sol   |      100 |      100 |      100 |      100 |                |\n--------------|----------|----------|----------|----------|----------------|\nAll files     |      100 |      100 |      100 |      100 |                |\n--------------|----------|----------|----------|----------|----------------|\n> Istanbul reports written to ./coverage/ and ./coverage.json\n> \u2728 Done in 5.15s.\n\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally add coverage related artifacts to your ",(0,o.kt)("inlineCode",{parentName:"p"},".gitignore")," file"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"# Coverage\ncoverage\ncoverage.json\n")))),(0,o.kt)("h2",{id:"add-gas-reporter"},"Add gas reporter"),(0,o.kt)("p",null,"We use ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/plugins/hardhat-gas-reporter.html"},(0,o.kt)("inlineCode",{parentName:"a"},"hardhat-gas-reporter")," plugin")," for gas consumption report."),(0,o.kt)("p",null,"Normally we don't want to see gas reports on every test run, therefore we only enable it with an environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"REPORT_GAS"),".\nTo set temporary env variable only in the context of a command, we use ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cross-env"},(0,o.kt)("inlineCode",{parentName:"a"},"cross-env")),"."),(0,o.kt)("p",null,"In step 5 below, we further use ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/dotenv"},(0,o.kt)("inlineCode",{parentName:"a"},"dotenv"))," to get secret/local variables from ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install dependencies"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev hardhat-gas-reporter cross-env dotenv\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add configuration to your ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts"),", see the list of ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/plugins/hardhat-gas-reporter.html#options"},"configuration options"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import "hardhat-gas-reporter";\nconst config: HardhatUserConfig = {\n  // ...\n  gasReporter: {\n    currency: "USD",\n    enabled: process.env.REPORT_GAS ? true : false,\n    showMethodSig: true,\n    onlyCalledMethods: false,\n  },\n};\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a new script command to ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "gas": "cross-env REPORT_GAS=1 yarn hardhat test"\n  }\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn gas")," to get a gas report from our tests run.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Optionally, if you want to get an actual market price, we integrate with ",(0,o.kt)("a",{parentName:"p",href:"https://coinmarketcap.com/api/pricing/"},"CoinMarketCap's API")," (Free tier is more than enough for personal use)."),(0,o.kt)("p",{parentName:"li"},"Copy the ","[",(0,o.kt)("inlineCode",{parentName:"p"},".env.example"),"]"," file and paste it into your own ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file, fill in your CoinMarketCap API key:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"COINMARKETCAP_API_KEY=xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx\n")),(0,o.kt)("p",{parentName:"li"},"Jump back to ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts"),", add the following extra configuration:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as dotenv from "dotenv";\ndotenv.config();\n\nconst config: HardhatUserConfig = {\n  // ...\n  gasReporter: {\n    // ...\n    coinmarketcap: process.env.COINMARKETCAP_API_KEY,\n  },\n};\n')),(0,o.kt)("p",{parentName:"li"},"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn gas")," again, and you shall see the USD cost."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"\xb7------------------------------------|---------------------------|-------------|-----------------------------\xb7\n|        Solc version: 0.8.0         \xb7  Optimizer enabled: true  \xb7  Runs: 200  \xb7  Block limit: 30000000 gas  \u2502\n\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n|  Methods                           \xb7               74 gwei/gas               \xb7       2868.09 usd/eth       \u2502\n\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n|  Contract  \xb7  Method               \xb7  Min        \xb7  Max        \xb7  Avg        \xb7  # calls      \xb7  usd (avg)  \u2502\n\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n|  Greeter   \xb7  greet()              \xb7          -  \xb7          -  \xb7          -  \xb7            0  \xb7          -  \u2502\n\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n|  Greeter   \xb7  greeting()           \xb7          -  \xb7          -  \xb7          -  \xb7            0  \xb7          -  \u2502\n\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n|  Greeter   \xb7  setGreeting(string)  \xb7          -  \xb7          -  \xb7      34658  \xb7            2  \xb7       7.36  \u2502\n\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n|  Deployments                       \xb7                                         \xb7  % of limit   \xb7             \u2502\n\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7|\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n|  Greeter                           \xb7          -  \xb7          -  \xb7     422738  \xb7        1.4 %  \xb7      89.72  \u2502\n\xb7------------------------------------|-------------|-------------|-------------|---------------|-------------\xb7\n\n")),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"Be aware of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cgewecke/eth-gas-reporter/issues/254"},"a bug")," from upstream in ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat-gas-report"),", if you don't see the price reporting, it's most likely due to this bug.")))),(0,o.kt)("h2",{id:"add-contract-sizer"},"Add contract sizer"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install dependencies"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev hardhat-contract-sizer\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add configuration to your ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts"),", see the list of ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/plugins/hardhat-gas-reporter.html#options"},"configuration options"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import "hardhat-contract-sizer";\nconst config: HardhatUserConfig = {\n  // ...\n  contractSizer: {\n    alphaSort: true,\n    disambiguatePaths: false,\n    runOnCompile: true,\n    strict: true,\n  },\n};\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a new script command to ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "size": "yarn hardhat size-contracts"\n  }\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn size")," to get the contract size report for our compiled contract. Alternatively, you should also see thereport when you do ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn compile"),"."))),(0,o.kt)("h2",{id:"add-commit-lint-and-git-hooks"},"Add commit lint and git hooks"),(0,o.kt)("p",null,"To enforce standardized, conventional commit messages, we use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/conventional-changelog/commitlint"},(0,o.kt)("inlineCode",{parentName:"a"},"commitlint")),".\nWe recommend skimming through ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/conventional-changelog/commitlint#benefits-using-commitlint"},'"benefits of commitlint"')," first if you haven't used it before.\nApparently, you should read the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/conventional-changelog/commitlint/tree/master/@commitlint/config-conventional"},"conventional rules")," that your future commit messages should adhere to."),(0,o.kt)("p",null,"To lint our commit message upon each ",(0,o.kt)("inlineCode",{parentName:"p"},"git commit"),", we need to create ",(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/githooks"},"git hooks"),", for that we use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typicode/husky"},(0,o.kt)("inlineCode",{parentName:"a"},"husky")),".\nFor avid explorers, you can read this ",(0,o.kt)("a",{parentName:"p",href:"https://blog.typicode.com/husky-git-hooks-javascript-config/"},"blog post")," to understand some design decisions of ",(0,o.kt)("inlineCode",{parentName:"p"},"husky"),"."),(0,o.kt)("p",null,"\u26a0 If you're running from the cloned ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-dapp")," repo, then you can skip this section as ",(0,o.kt)("inlineCode",{parentName:"p"},"commitlint")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"husky")," hooks had been configured already.\nElse if you are building a contract package in your own monorepo, then you should add ",(0,o.kt)("inlineCode",{parentName:"p"},"husky")," in root ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," instead."),(0,o.kt)("p",null,"Choose one of the two depending on your project setup:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#contract-boilerplate-as-its-separate-repo"},"Contract boilerplate as its separate repo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#contract-boilerplate-as-one-of-the-packages-in-a-monorepo"},"Contract boilerplate as one of the packages in a monorepo"))),(0,o.kt)("h3",{id:"contract-boilerplate-as-its-separate-repo"},"Contract boilerplate as its separate repo"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install dependencies"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# Install commitlint cli and conventional config\nyarn add --dev @commitlint/config-conventional @commitlint/cli husky\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Configure ",(0,o.kt)("inlineCode",{parentName:"p"},"commitlint")," to use conventional config"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"echo \"module.exports = {extends: ['@commitlint/config-conventional']}\" > commitlint.config.js\n")),(0,o.kt)("p",{parentName:"li"},"Activate/initialize ",(0,o.kt)("inlineCode",{parentName:"p"},"husky")," (one-time):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npx husky-init && yarn\n")),(0,o.kt)("p",{parentName:"li"},"And you should be able to see a ",(0,o.kt)("inlineCode",{parentName:"p"},".husky/pre-commit")," file created for you.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"First modify ",(0,o.kt)("inlineCode",{parentName:"p"},".husky/pre-commit")," file to run linting instead:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},' #!/bin/sh\n . "$(dirname "$0")/_/husky.sh"\n\n yarn lint:fix\n')),(0,o.kt)("p",{parentName:"li"},"Then add a new hook to ensure proper commit message:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# ensure proper commit messages\nnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\n")))),(0,o.kt)("h3",{id:"contract-boilerplate-as-one-of-the-packages-in-a-monorepo"},"Contract boilerplate as one of the packages in a monorepo"),(0,o.kt)("p",null,"\u26a0 Again, if you're running from the cloned ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-dapp")," repo, then you can skip this section as ",(0,o.kt)("inlineCode",{parentName:"p"},"commitlint")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"husky")," hooks had been configured already."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go back to Monorepo project root, then run"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev @commitlint/config-conventional @commitlint/cli husky\necho \"module.exports = {extends: ['@commitlint/config-conventional']}\" > commitlint.config.js\n\n# enable Git hooks\nyarn husky install\n\n# ensure correct format and linting before commit\nyarn husky add .husky/pre-commit 'yarn lint:fix'\ngit add .husky/pre-commit\n\n# ensure proper commit messages\nyarn husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\ngit add .husky/commit-msg\n")),(0,o.kt)("p",{parentName:"li"},"Add the following lines to ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," in monorepo's root:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "lint": "yarn lerna run lint",\n    "lint:fix": "yarn lerna run lint:fix"\n  }\n}\n')),(0,o.kt)("p",{parentName:"li"},"Done. Go ahead and try commit with some bad error message such as ",(0,o.kt)("inlineCode",{parentName:"p"},"foo blah did something"),", the hooks should prevent you from committing. \ud83d\udee1\ufe0f"))),(0,o.kt)("h2",{id:"add-typechain-plugin"},"Add ",(0,o.kt)("inlineCode",{parentName:"h2"},"TypeChain")," plugin"),(0,o.kt)("p",null,"Next stop, we add a super helpful tool called ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dethcrypto/TypeChain"},(0,o.kt)("inlineCode",{parentName:"a"},"TypeChain")),' to our project template.\nThe one-liner pitch is "automatically generate TypeScript bindings for smart contracts".'),(0,o.kt)("p",null,"What that means is, when writing tests or later on writing deployment scripts, we are likely to invoke functions or query getters defined in our contracts.\nRight now it doesn't seem a hustle to remember each function signature (i.e. the function name and input/output parameters and their types) since our toy ",(0,o.kt)("inlineCode",{parentName:"p"},"Greeter.sol")," is simple;\nbut what if our contracts get complicated with dozens of functions?\nWouldn't it be handy the auto-completion engine in your editor/IDE knows these function signatures and offer you rich type information as you code? -- that's what ",(0,o.kt)("inlineCode",{parentName:"p"},"TypeChain")," provides!"),(0,o.kt)("p",null,"While ",(0,o.kt)("inlineCode",{parentName:"p"},"TypeChain")," works with many other frameworks, we will be using its ",(0,o.kt)("inlineCode",{parentName:"p"},"Hardhat")," plugin \ud83d\udc77."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install dependencies, (we use ",(0,o.kt)("inlineCode",{parentName:"p"},"waffle+ethers.js")," stack)"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev typechain @typechain/hardhat @typechain/ethers-v5\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Ensure you have the following imports in ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import "@typechain/hardhat";\nimport "@nomiclabs/hardhat-ethers";\nimport "@nomiclabs/hardhat-waffle";\n')),(0,o.kt)("p",{parentName:"li"},"Add ",(0,o.kt)("inlineCode",{parentName:"p"},"TypeChain")," plugin related configuration, more ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dethcrypto/TypeChain/tree/master/packages/hardhat#configuration"},"docs here"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const config: HardhatUserConfig = {\n  // ...\n  typechain: {\n    outDir: "typechained",\n    target: "ethers-v5",\n  },\n};\n')),(0,o.kt)("p",{parentName:"li"},"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn compile"),", upon completion, you should be able to see a newly generated ",(0,o.kt)("inlineCode",{parentName:"p"},"typechained/")," folder which contains TypeScript types info of your smart contracts."),(0,o.kt)("p",{parentName:"li"},"\ud83d\udca1 a bit explanation here: by default, all the types artifacts generated would be outputted to ",(0,o.kt)("inlineCode",{parentName:"p"},"typechain/"),".\nThe primarily reason we customize it to ",(0,o.kt)("inlineCode",{parentName:"p"},"outDir: typechained")," is to avoid confusion between importing from ",(0,o.kt)("inlineCode",{parentName:"p"},"@typechaind")," v.s. importing from an npm package named ",(0,o.kt)("inlineCode",{parentName:"p"},"@typechain"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To enable internal types import similarly to a published package, we update our ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "paths": {\n      "@typechained": ["typechained/index"]\n    }\n  }\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, jump to your ",(0,o.kt)("inlineCode",{parentName:"p"},"test/greeter.spec.ts")," and change to the following (pay attention to ",(0,o.kt)("inlineCode",{parentName:"p"},"NOTICE HERE")," comments):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { expect } from "chai";\nimport { ethers } from "hardhat";\n// NOTICE HERE: import autogenerated types\nimport { Greeter, Greeter__factory } from "@typechained";\n\ndescribe("Greeter", function () {\n  // NOTICE HERE: we can give our contract a `Greeter` type!! instead of an `any` type.\n  let greeter: Greeter;\n  let greeterFactory: Greeter__factory;\n\n  beforeEach(async () => {\n    greeterFactory = (await ethers.getContractFactory(\n      "Greeter"\n    )) as Greeter__factory;\n    greeter = await greeterFactory.deploy("Hello, world!");\n  });\n\n  it("Should return the new greeting once it\'s changed", async function () {\n    // NOTICE HERE: try type this yourself, your IDE\'s auto-completion should suggest available\n    // functions of `greeter` as you type.\n    await greeter.deployed();\n\n    expect(await greeter.greet()).to.equal("Hello, world!");\n\n    const setGreetingTx = await greeter.setGreeting("Hola, mundo!");\n\n    // wait until the transaction is mined\n    await setGreetingTx.wait();\n\n    expect(await greeter.greet()).to.equal("Hola, mundo!");\n  });\n});\n')),(0,o.kt)("p",{parentName:"li"},"Note: without the customized path declaration in the last step, you can still import types via relative path ",(0,o.kt)("inlineCode",{parentName:"p"},"import { Greeter } from '../typechaind/index';")," -- but it is (arguably) not as nice as our import style which treats ",(0,o.kt)("inlineCode",{parentName:"p"},"@typechaind")," as just another package."))),(0,o.kt)("h2",{id:"add-deployment-plugins"},"Add deployment plugins"),(0,o.kt)("p",null,"Now with smart contracts written and locally tested, it's time for live testnet/mainnet deployments, for which we use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wighawag/hardhat-deploy/tree/master"},(0,o.kt)("inlineCode",{parentName:"a"},"hardhat-deploy")," plugin"),"."),(0,o.kt)("p",null,"Before deploying, we would like to remove debug-related harness such as ",(0,o.kt)("inlineCode",{parentName:"p"},"console.sol")," -- for which we use ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/plugins/hardhat-preprocessor.html"},(0,o.kt)("inlineCode",{parentName:"a"},"hardhat-preprocessor")),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install the plugin:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev hardhat-preprocessor\n")),(0,o.kt)("p",{parentName:"li"},"Add the following to your ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { removeConsoleLog } from "hardhat-preprocessor";\n\nconst config: HardhatUserConfig = {\n  // ...\n  preprocess: {\n    eachLine: removeConsoleLog(\n      (hre) =>\n        hre.network.name !== "hardhat" && hre.network.name !== "localhost"\n    ),\n  },\n};\n')),(0,o.kt)("p",{parentName:"li"},"The configuration above, as ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/plugins/hardhat-preprocessor.html#configuration"},"explained here"),", remove any ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log()")," in your contract when connecting to live networks."),(0,o.kt)("p",{parentName:"li"},"Now back to deployments."),(0,o.kt)("p",{parentName:"li"},"\ud83d\udca1 tips: most steps below offer only minimum clarifications, you are strongly recommended to read the ",(0,o.kt)("inlineCode",{parentName:"p"},"README")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat-deploy")," repo for more under-the-hood explanations and other available setup options for more complicated deployment flows.\nAlso when lost, try to find ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wighawag/template-ethereum-contracts"},"template/example deployment setups here"),"."))),(0,o.kt)("h3",{id:"deploying-to-localhost-and-test-against-deployed-contracts"},"deploying to localhost and test against deployed contracts"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install dependencies"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add --dev hardhat-deploy\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Update ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import "hardhat-deploy";\nconst config: HardhatUserConfig = {\n  // ...\n  networks: {\n    hardhat: {\n      chainId: 1337, // temporary for MetaMask support: https://github.com/MetaMask/metamask-extension/issues/10290\n    },\n  },\n  paths: {\n    // ...\n    deploy: "./scripts/deploy",\n  },\n  namedAccounts: {\n    deployer: {\n      default: 0, // by default, take the first account as deployer\n      rinkeby: "0x5238A644636946963ffeDAc52Ec53fb489D3a1CD", // on rinkeby, use a specific account\n    },\n  },\n};\n')),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"To use ",(0,o.kt)("inlineCode",{parentName:"li"},"scripts/deploy/")," as the folder for all deployment scripts (personal preference, you can also go with default path which is ",(0,o.kt)("inlineCode",{parentName:"li"},"deploy/"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/wighawag/hardhat-deploy/tree/master#3-extra-hardhatconfig-paths-options"},"see doc here"),"),"),(0,o.kt)("li",{parentName:"ul"},"The default ",(0,o.kt)("inlineCode",{parentName:"li"},"chainId")," of ",(0,o.kt)("inlineCode",{parentName:"li"},"hardhat")," network and ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost")," network are ",(0,o.kt)("inlineCode",{parentName:"li"},"31337"),", but we can change it to something else (as long as not colliding with others). Specifically, due to ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/MetaMask/metamask-extension/issues/10290"},"a MetaMask compatibility issue"),", we change it ",(0,o.kt)("inlineCode",{parentName:"li"},"1337"),"."),(0,o.kt)("li",{parentName:"ul"},"The differences between ",(0,o.kt)("inlineCode",{parentName:"li"},"hardhat")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost")," is roughly: the latter is a separate, long-running process where changes made to it can be persistent locally across scripts and invocations; whereas the former is usually an ephemeral session (e.g. when you run fresh tests) that would shut down once scripts are done running (changes to the network are not persistent)."),(0,o.kt)("li",{parentName:"ul"},'We "named" the first account as the ',(0,o.kt)("inlineCode",{parentName:"li"},"deployer"),", (to get the full list of accounts hardhat generated for you, run ",(0,o.kt)("inlineCode",{parentName:"li"},"yarn hardhat accounts")," task). When pushing to testnet or main net, we usually use one of our accounts in our MetaMask wallet with safer, protected private key."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a new deployment script ",(0,o.kt)("inlineCode",{parentName:"p"},"./scripts/deploy/001-Greeter.deploy.ts"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { HardhatRuntimeEnvironment } from "hardhat/types";\nimport { DeployFunction } from "hardhat-deploy/types";\n\nexport const INITIAL_GREET: { [chainId: string]: string } = {\n  "1337": "Bonjour localhost!",\n  "4": "Guten tag, Rinkeby!",\n};\n\nconst deployFunc: DeployFunction = async (\n  hre: HardhatRuntimeEnvironment\n) => {\n  const { deployer } = await hre.getNamedAccounts();\n  const chainId = await hre.getChainId();\n\n  await hre.deployments.deploy("Greeter", {\n    from: deployer,\n    args: [INITIAL_GREET[chainId]],\n    log: true,\n  });\n};\ndeployFunc.tags = ["Greeter"];\n\nexport default deployFunc;\n')),(0,o.kt)("p",{parentName:"li"},"Note on the filename: as ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wighawag/hardhat-deploy/tree/master#the-deploy-task"},"documented here"),", when you later run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn deploy --network <NETWORK>"),', hardhat will "scan for files in alphabetical order and execute them in turn".\nIf your deployment workflow is straightforwardly in a sequential order, then naming your deployment scripts using ',(0,o.kt)("inlineCode",{parentName:"p"},"xxx-<contract/purpose>.deploy.ts")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"xxx")," dictates the order, would be sufficient.\nHowever, if your deployment workflow is more complicated with library linking or inter-dependencies or even conditional deployments, then you should check out ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wighawag/hardhat-deploy/tree/master#deploy-scripts"},(0,o.kt)("inlineCode",{parentName:"a"},"DeployFunction"),"'s ",(0,o.kt)("inlineCode",{parentName:"a"},"skip"),", ",(0,o.kt)("inlineCode",{parentName:"a"},"dependencies"),", and ",(0,o.kt)("inlineCode",{parentName:"a"},"runAtTheEnd")," fields here")," as well as\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wighawag/hardhat-deploy/tree/master#handling-contract-using-libraries"},"library linking")," config."),(0,o.kt)("p",{parentName:"li"},"Then add this to your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," for slightly shorthanded commands:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "deploy": "yarn hardhat deploy"\n  }\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Now, first start a local node in a new terminal window: ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn hardhat node"),", you should see ",(0,o.kt)("inlineCode",{parentName:"p"},"Started HTTP and WebSocket JSON-RPC server at http://127.0.0.1:8545/"),"."),(0,o.kt)("p",{parentName:"li"},"Jump to another terminal session, run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn deploy --network localhost"),", you should see our ",(0,o.kt)("inlineCode",{parentName:"p"},"Greeter.sol")," successfully deployed."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"web3_clientVersion\nContract deployment: Greeter\nContract address:    0x5fbdb2315678afecb367f032d93f642f64180aa3\nTransaction:         0xf87999b7500e0ded42ddd10982e458c7fbcc054fd82fcaad893f45c2ecc037b8\nFrom:                0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\nValue:               0 ETH\nGas used:            542532 of 542532\nBlock #1:            0x13b50db64e9e7120d870078b9b41f802c908161145cf1cf92e9ce32e35d80fd2\n\neth_chainId\neth_accounts (2)\neth_chainId (2)\neth_getTransactionByHash\neth_blockNumber\neth_chainId\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Just for experimentation, you can try to run the same deployment script again, you will see ",(0,o.kt)("inlineCode",{parentName:"li"},"hardhat")," by default won't create a duplicated contract ",(0,o.kt)("inlineCode",{parentName:"li"},'reusing "Greeter" at 0x5FbDB2315678afecb367f032d93F642f64180aa3')," -- this is a clear indication that our changes made to our local blockchain are persistent."),(0,o.kt)("li",{parentName:"ul"},"You should a new folder ",(0,o.kt)("inlineCode",{parentName:"li"},"deployemnts/")," generated, go ahead and explore what's inside."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, let's try to test against our deployed contract.\nCopy ",(0,o.kt)("a",{parentName:"p",href:"./packages/smart-contracts-boilerplate-sample/scripts/test-local-deployed-greeter.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"test-local-deployed-greeter.ts"))," to your ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts/test-local-deployed-greeter.ts"),"."),(0,o.kt)("p",{parentName:"li"},"Run"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn hardhat run ./scripts/test-local-deployed-greeter.ts --network localhost\n")),(0,o.kt)("p",{parentName:"li"},"You should see our ",(0,o.kt)("inlineCode",{parentName:"p"},"assert((await greeter.greet()) === 'Bonjour localhost!')")," passed! If you want, you can also try ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log(greeterDeployment.address)")," which would print the same address shown in the last step."))),(0,o.kt)("h3",{id:"deploying-to-live-testnet-or-mainnet"},"deploying to live testnet or mainnet"),(0,o.kt)("p",null,"Now you are ready for deploying to live ","[test|main]"," networks under your MetaMask accounts."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"We will need to use our Alchemy hosted endpoints for live testnet access, and use wallet mnemonic (the master secret seed) to derive and sign our deployment transactions.\nIf you haven't set up Alchemy, please refer to ",(0,o.kt)("a",{parentName:"p",href:"./warmup.md#setup-alchemy"},"warm up"),"."),(0,o.kt)("p",{parentName:"li"},"First, create a new file at your ",(0,o.kt)("inlineCode",{parentName:"p"},"utils/network.ts")," and copy ",(0,o.kt)("a",{parentName:"p",href:"./packages/smart-contracts-boilerplate-sample/utils/network.ts"},"this file")," over."),(0,o.kt)("p",{parentName:"li"},"Update your ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")," to use alchemy endpoints for ",(0,o.kt)("inlineCode",{parentName:"p"},"rinkeby")," testnet, and use your own mnemonic (i.e. your MetaMask wallet) to send transactions:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { nodeUrl, accounts } from "./utils/network";\nconst config: HardhatUserConfig = {\n  networks: {\n    hardhat: {\n      chainId: 1337, // temporary for MetaMask support: https://github.com/MetaMask/metamask-extension/issues/10290\n    },\n    localhost: {\n      url: nodeUrl("localhost"),\n    },\n    rinkeby: {\n      url: nodeUrl("rinkeby"),\n      accounts: accounts("rinkeby"),\n    },\n    // can configure other networks, see examples:\n    // https://github.com/wighawag/template-ethereum-contracts/blob/main/hardhat.config.ts\n  },\n};\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"cp .env.example .env\n")),(0,o.kt)("p",{parentName:"li"},"Edit your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file by filling your API tokens and wallet mnemonic."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"On wallet mnemonic:")," we will be using a mnemonic wallet whose accounts are all deterministically derived from a master secret phrase (usually 12 words).\nYou can"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"either directly use your MetaMask's wallet by revealing its secret seed and paste it into ",(0,o.kt)("inlineCode",{parentName:"li"},".env")),(0,o.kt)("li",{parentName:"ul"},"or run ",(0,o.kt)("inlineCode",{parentName:"li"},"yarn hardhat run ./scripts/generate-new-mnemonic.ts")," and then go to your MetaMask and send some Ethers to the newly created wallet address (since deploying contracts require gas to pay transaction fee).")),(0,o.kt)("p",{parentName:"li"},"Also do remember to update the ",(0,o.kt)("inlineCode",{parentName:"p"},"deployer"),"'s address configuration in ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")," to the address associated with your mnemonic wallet."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const config: HardhatUserConfig = {\n  namedAccounts: {\n    deployer: {\n      default: 0, // by default, take the first account as deployer\n      rinkeby: "0x5238A644636946963ffeDAc52Ec53fb489D3a1CD", // !!! CHANGE THIS TO YOUR ADDRESS !!!\n    },\n  },\n};\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn deploy --network rinkeby\n")),(0,o.kt)("p",{parentName:"li"},"You should see (be patient, this might take some time):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},'deploying "Greeter" (tx: 0x41ef031e20b772de6b43a820e1ffdfc80b3d7fbdb978a75d13dee7a1b554f237)...: deployed at 0xD4deB045fb89E750864a7349087A6674C1E79F78 with 542664 gas\n\u2728  Done in 71.73s.\n')),(0,o.kt)("p",{parentName:"li"},"You should be able to see your transactions and deployed contracts on Etherscan. For example I have switched my MetaMask to my second account, then ran the deploy command to ",(0,o.kt)("inlineCode",{parentName:"p"},"rinkeby"),", you can find my transaction ",(0,o.kt)("a",{parentName:"p",href:"https://rinkeby.etherscan.io/tx/0x41ef031e20b772de6b43a820e1ffdfc80b3d7fbdb978a75d13dee7a1b554f237"},"here"),"."))),(0,o.kt)("p",null,"\ud83d\udca1 The best practice is you version control (git commit) your ",(0,o.kt)("inlineCode",{parentName:"p"},"deployments/")," artifacts for discovery, reference and consistency during migrations."),(0,o.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,o.kt)("h4",{id:"yarn-add-failed-inside-a-workspacepackage"},(0,o.kt)("inlineCode",{parentName:"h4"},"yarn add")," failed inside a workspace/package"),(0,o.kt)("p",null,"If you are using monorepo like ",(0,o.kt)("inlineCode",{parentName:"p"},"lerna")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn workspaces"),", then make sure:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"specified in ",(0,o.kt)("inlineCode",{parentName:"p"},"lerna.json")," in your monorepo root, something like:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "npmClient": "yarn",\n  "useWorkspaces": true,\n  "packages": ["packages/*"],\n  "version": "independent"\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"in all of your ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/*/package.json"),", you have specified a ",(0,o.kt)("inlineCode",{parentName:"p"},"version")," field"))))}h.isMDXComponent=!0}}]);